Subject: Add balance_power profile.
Author: Michael Wu <me@miXwui.com>

diff --git a/src/power-profiles-daemon.c b/src/power-profiles-daemon.c
index ab1b095..fc2cacc 100644
--- a/src/power-profiles-daemon.c
+++ b/src/power-profiles-daemon.c
@@ -768,7 +768,7 @@ has_required_drivers (PpdApp *data)
 {
   PpdDriver *driver;
 
-  driver = GET_DRIVER (PPD_PROFILE_BALANCED);
+  driver = GET_DRIVER (PPD_PROFILE_BALANCE_PERFORMANCE);
   if (!driver || !G_IS_OBJECT (driver))
     return FALSE;
   driver = GET_DRIVER (PPD_PROFILE_POWER_SAVER);
@@ -1002,8 +1002,8 @@ int main (int argc, char **argv)
   data->probed_drivers = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
   data->actions = g_ptr_array_new_with_free_func ((GDestroyNotify) g_object_unref);
   data->profile_holds = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, (GDestroyNotify) profile_hold_free);
-  data->active_profile = PPD_PROFILE_BALANCED;
-  data->selected_profile = PPD_PROFILE_BALANCED;
+  data->active_profile = PPD_PROFILE_BALANCE_PERFORMANCE;
+  data->selected_profile = PPD_PROFILE_BALANCE_PERFORMANCE;
   load_configuration (data);
   ppd_app = data;
 
diff --git a/src/ppd-driver-intel-pstate.c b/src/ppd-driver-intel-pstate.c
index 5939d77..50daa50 100644
--- a/src/ppd-driver-intel-pstate.c
+++ b/src/ppd-driver-intel-pstate.c
@@ -47,7 +47,7 @@ ppd_driver_intel_pstate_constructor (GType                  type,
                                                                               construct_params);
   g_object_set (object,
                 "driver-name", "intel_pstate",
-                "profiles", PPD_PROFILE_PERFORMANCE | PPD_PROFILE_BALANCED | PPD_PROFILE_POWER_SAVER,
+                "profiles", PPD_PROFILE_PERFORMANCE | PPD_PROFILE_BALANCE_POWER | PPD_PROFILE_BALANCE_PERFORMANCE | PPD_PROFILE_POWER_SAVER,
                 NULL);
 
   return object;
@@ -206,7 +206,7 @@ profile_to_pref (PpdProfile profile)
   switch (profile) {
   case PPD_PROFILE_POWER_SAVER:
     return "power";
-  case PPD_PROFILE_BALANCED:
+  case PPD_PROFILE_BALANCE_PERFORMANCE:
     return "balance_performance";
   case PPD_PROFILE_PERFORMANCE:
     return "performance";

diff --git a/src/ppd-driver-placeholder.c b/src/ppd-driver-placeholder.c
index 11d9e93..a87882e 100644
--- a/src/ppd-driver-placeholder.c
+++ b/src/ppd-driver-placeholder.c
@@ -28,7 +28,7 @@ ppd_driver_placeholder_constructor (GType                  type,
                                                                               construct_params);
   g_object_set (object,
                 "driver-name", "placeholder",
-                "profiles", PPD_PROFILE_POWER_SAVER | PPD_PROFILE_BALANCED,
+                "profiles", PPD_PROFILE_POWER_SAVER | PPD_PROFILE_BALANCE_PERFORMANCE,
                 NULL);
 
   return object;

diff --git a/src/ppd-driver-platform-profile.c b/src/ppd-driver-platform-profile.c
index 8111251..9dcfe90 100644
--- a/src/ppd-driver-platform-profile.c
+++ b/src/ppd-driver-platform-profile.c
@@ -45,7 +45,7 @@ ppd_driver_platform_profile_constructor (GType                  type,
                                                                                    construct_params);
   g_object_set (object,
                 "driver-name", "platform_profile",
-                "profiles", PPD_PROFILE_PERFORMANCE | PPD_PROFILE_BALANCED | PPD_PROFILE_POWER_SAVER,
+                "profiles", PPD_PROFILE_PERFORMANCE | PPD_PROFILE_BALANCE_POWER | PPD_PROFILE_BALANCE_PERFORMANCE | PPD_PROFILE_POWER_SAVER,
                 NULL);
 
   return object;
@@ -62,8 +62,10 @@ profile_to_acpi_platform_profile_value (PpdDriverPlatformProfile *self,
     if (g_strv_contains ((const char * const*) self->profile_choices, "cool"))
       return "cool";
     return "quiet";
-  case PPD_PROFILE_BALANCED:
-    return "balanced";
+  case PPD_PROFILE_BALANCE_POWER:
+    return "balance_power";
+  case PPD_PROFILE_BALANCE_PERFORMANCE:
+    return "balance_performance";
   case PPD_PROFILE_PERFORMANCE:
     return "performance";
   }
@@ -82,8 +84,10 @@ acpi_platform_profile_value_to_profile (const char *str)
   case 'c': /* cool */
   case 'q': /* quiet */
     return PPD_PROFILE_POWER_SAVER;
+  case 'e':
+    return PPD_PROFILE_BALANCE_POWER;
   case 'b':
-    return PPD_PROFILE_BALANCED;
+    return PPD_PROFILE_BALANCE_PERFORMANCE;
   case 'p':
     return PPD_PROFILE_PERFORMANCE;
   default:

diff --git a/src/ppd-driver.c b/src/ppd-driver.c
index 93abb34..253c2a9 100644
--- a/src/ppd-driver.c
+++ b/src/ppd-driver.c
@@ -253,7 +253,7 @@ ppd_driver_get_profiles (PpdDriver *driver)
 {
   PpdDriverPrivate *priv;
 
-  g_return_val_if_fail (PPD_IS_DRIVER (driver), PPD_PROFILE_BALANCED);
+  g_return_val_if_fail (PPD_IS_DRIVER (driver), PPD_PROFILE_BALANCE_PERFORMANCE);
 
   priv = PPD_DRIVER_GET_PRIVATE (driver);
   return priv->profiles;

diff --git a/src/ppd-profile.h b/src/ppd-profile.h
index 03c04eb..a76fc99 100644
--- a/src/ppd-profile.h
+++ b/src/ppd-profile.h
@@ -14,7 +14,8 @@
 /**
  * PpdProfile:
  * @PPD_PROFILE_POWER_SAVER: "power-saver", the battery saving profile
- * @PPD_PROFILE_BALANCED: balanced, the default profile
+ * @PPD_PROFILE_BALANCE_POWER: balanced leaning towards battery saving
+ * @PPD_PROFILE_BALANCE_PERFORMANCE: balanced leaning towards performance, the default profile
  * @PPD_PROFILE_PERFORMANCE: as fast as possible, a profile that does
  *   not care about noise or battery consumption, only available
  *   on some systems.
@@ -22,12 +23,13 @@
  * The different profiles available for users to select.
  */
 typedef enum {
-  PPD_PROFILE_POWER_SAVER  = 1 << 0,
-  PPD_PROFILE_BALANCED     = 1 << 1,
-  PPD_PROFILE_PERFORMANCE  = 1 << 2
+  PPD_PROFILE_POWER_SAVER          = 1 << 0,
+  PPD_PROFILE_BALANCE_POWER        = 1 << 1,
+  PPD_PROFILE_BALANCE_PERFORMANCE  = 1 << 2,
+  PPD_PROFILE_PERFORMANCE          = 1 << 3
 } PpdProfile;
 
-#define PPD_PROFILE_ALL   (PPD_PROFILE_BALANCED | PPD_PROFILE_POWER_SAVER | PPD_PROFILE_PERFORMANCE)
+#define PPD_PROFILE_ALL   (PPD_PROFILE_BALANCE_PERFORMANCE | PPD_PROFILE_BALANCE_POWER | PPD_PROFILE_POWER_SAVER | PPD_PROFILE_PERFORMANCE)
 #define PPD_PROFILE_UNSET (0)
 
 const char *ppd_profile_to_str (PpdProfile profile);

diff --git a/tests/integration-test.py b/tests/integration-test.py
index 2dd3677..3c484d2 100755
--- a/tests/integration-test.py
+++ b/tests/integration-test.py
@@ -345,7 +345,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('performance'))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
@@ -425,7 +425,7 @@ class Tests(dbusmock.DBusTestCase):
       self.assertEqual(profiles[0]['Driver'], 'platform_profile')
 
     def test_intel_pstate_balance(self):
-      '''Intel P-State driver (balance)'''
+      '''Intel P-State driver (balance_performance)'''
 
       # Create CPU with preference
       dir1 = os.path.join(self.testbed.get_root_dir(), "sys/devices/system/cpu/cpufreq/policy0/")
@@ -491,12 +491,12 @@ class Tests(dbusmock.DBusTestCase):
 
       self.start_daemon()
 
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # Error when setting performance mode
       with self.assertRaises(gi.repository.GLib.GError):
         self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('performance'))
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       contents = None
       with open(os.path.join(dir1, "energy_performance_preference"), 'rb') as f:
@@ -531,7 +531,7 @@ class Tests(dbusmock.DBusTestCase):
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 2)
       self.assertEqual(profiles[0]['Driver'], 'placeholder')
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performanced')
 
       contents = None
       with open(os.path.join(dir1, "energy_performance_preference"), 'rb') as f:
@@ -674,7 +674,7 @@ class Tests(dbusmock.DBusTestCase):
 
       acpi_dir = os.path.join(self.testbed.get_root_dir(), "sys/firmware/acpi/")
       with open(os.path.join(acpi_dir, "platform_profile_choices"),'w') as choices:
-        choices.write("low-power\nbalanced\nperformance\n")
+        choices.write("low-power\nbalance_power\nbalance_performance\nperformance\n")
       with open(os.path.join(acpi_dir, "platform_profile"),'w') as profile:
         profile.write("performance\n")
 
@@ -683,7 +683,7 @@ class Tests(dbusmock.DBusTestCase):
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
       # Was set in platform_profile before we loaded the drivers
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
       self.assertEqual(self.get_dbus_property('PerformanceDegraded'), '')
 
       self.stop_daemon()
@@ -703,8 +703,8 @@ class Tests(dbusmock.DBusTestCase):
       self.assertEqual(len(profiles), 3)
       self.assertEqual(profiles[0]['Driver'], 'platform_profile')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
-      self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
+      self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balance_performance')
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'power-saver')
       self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'cool')
@@ -725,8 +725,8 @@ class Tests(dbusmock.DBusTestCase):
       self.assertEqual(len(profiles), 3)
       self.assertEqual(profiles[0]['Driver'], 'platform_profile')
       self.assertEqual(profiles[0]['Profile'], 'power-saver')
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
-      self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
+      self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'balance_performance')
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'power-saver')
       self.assertEqual(self.read_sysfs_file("sys/firmware/acpi/platform_profile"), b'quiet')
@@ -751,16 +751,16 @@ class Tests(dbusmock.DBusTestCase):
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", cookie))
       profileHolds = self.get_dbus_property('ActiveProfileHolds')
       self.assertEqual(len(profileHolds), 0)
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # When the profile is changed manually, holds should be released a
       self.call_dbus_method('HoldProfile', GLib.Variant("(sss)", ('performance', '', '')))
       self.assertEqual(len(self.get_dbus_property('ActiveProfileHolds')), 1)
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
 
-      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('balanced'))
+      self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('balance_performance'))
       self.assertEqual(len(self.get_dbus_property('ActiveProfileHolds')), 0)
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # When all holds are released, the last manually selected profile should be activated
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
@@ -804,7 +804,7 @@ class Tests(dbusmock.DBusTestCase):
 
       profiles = self.get_dbus_property('Profiles')
       self.assertEqual(len(profiles), 3)
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # Test every order of holding and releasing power-saver and performance
       # hold performance and then power-saver, release in the same order
@@ -815,7 +815,7 @@ class Tests(dbusmock.DBusTestCase):
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", performanceCookie))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'power-saver')
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", powerSaverCookie))
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # hold performance and then power-saver, but release power-saver first
       performanceCookie = self.call_dbus_method('HoldProfile', GLib.Variant("(sss)", ('performance', '', '')))
@@ -825,7 +825,7 @@ class Tests(dbusmock.DBusTestCase):
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)",powerSaverCookie))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", performanceCookie))
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # hold power-saver and then performance, release in the same order
       powerSaverCookie = self.call_dbus_method('HoldProfile', GLib.Variant("(sss)", ('power-saver', '', '')))
@@ -835,7 +835,7 @@ class Tests(dbusmock.DBusTestCase):
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)",powerSaverCookie))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'performance')
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", performanceCookie))
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       # hold power-saver and then performance, but release performance first
       powerSaverCookie = self.call_dbus_method('HoldProfile', GLib.Variant("(sss)", ('power-saver', '', '')))
@@ -845,7 +845,7 @@ class Tests(dbusmock.DBusTestCase):
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)",performanceCookie))
       self.assertEqual(self.get_dbus_property('ActiveProfile'), 'power-saver')
       self.call_dbus_method('ReleaseProfile', GLib.Variant("(u)", powerSaverCookie))
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       self.stop_daemon()
 
@@ -855,7 +855,7 @@ class Tests(dbusmock.DBusTestCase):
       self.create_platform_profile()
 
       self.start_daemon()
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
       self.stop_daemon()
 
@@ -880,7 +880,7 @@ class Tests(dbusmock.DBusTestCase):
 
       self.create_platform_profile()
       self.start_daemon()
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
       self.set_dbus_property('ActiveProfile', GLib.Variant.new_string('power-saver'))
       self.stop_daemon()
       self.remove_platform_profile()
@@ -889,11 +889,11 @@ class Tests(dbusmock.DBusTestCase):
 
       self.create_empty_platform_profile()
       self.start_daemon()
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       acpi_dir = os.path.join(self.testbed.get_root_dir(), "sys/firmware/acpi/")
       with open(os.path.join(acpi_dir, "platform_profile_choices"),'w') as choices:
-        choices.write("low-power\nbalanced\nperformance\n")
+        choices.write("low-power\nbalance_performance\nperformance\n")
       with open(os.path.join(acpi_dir, "platform_profile"),'w') as profile:
         profile.write("performance\n")
 
@@ -905,7 +905,7 @@ class Tests(dbusmock.DBusTestCase):
 
       self.obj_polkit.SetAllowed(dbus.Array([], signature='s'))
       self.start_daemon()
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       proxy = Gio.DBusProxy.new_sync(
           self.dbus, Gio.DBusProxyFlags.DO_NOT_AUTO_START, None, PP,
@@ -921,13 +921,13 @@ class Tests(dbusmock.DBusTestCase):
 
       self.obj_polkit.SetAllowed(dbus.Array([], signature='s'))
       self.start_daemon()
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
 
       with self.assertRaises(gi.repository.GLib.GError) as cm:
         self.call_dbus_method('HoldProfile', GLib.Variant("(sss)", ('performance', '', '')))
       self.assertIn('AccessDenied', str(cm.exception))
 
-      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balanced')
+      self.assertEqual(self.get_dbus_property('ActiveProfile'), 'balance_performance')
       self.assertEqual(len(self.get_dbus_property('ActiveProfileHolds')), 0)
 
       self.stop_daemon()
